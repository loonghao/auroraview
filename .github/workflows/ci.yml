name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Quick validation - runs on every PR
  quick-test:
    name: Quick Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.10", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev

      - name: Install build dependencies
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install maturin pytest pytest-cov

      - name: Build extension
        run: |
          python -m pip install -e .

      - name: Run Rust tests
        run: |
          cargo test --lib

      - name: Run Python tests
        run: |
          pytest tests/ -v --tb=short -m "not slow"

  # Multi-version Python testing - validates ABI3 compatibility
  multi-python-test:
    name: Multi-Python Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create Python venv (for Python 3.7)
        if: matrix.python-version == '3.7'
        run: |
          # Use the Python installed by setup-python
          python -m venv .venv-py37
          .venv-py37/bin/python --version

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-py${{ matrix.python-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev

      - name: Install build dependencies
        run: |
          if [ "${{ matrix.python-version }}" = "3.7" ]; then
            .venv-py37/bin/python -m pip install -U pip setuptools wheel
            .venv-py37/bin/python -m pip install maturin pytest pytest-cov
          else
            python -m pip install -U pip setuptools wheel
            python -m pip install maturin pytest pytest-cov
          fi

      - name: Build extension
        run: |
          if [ "${{ matrix.python-version }}" = "3.7" ]; then
            .venv-py37/bin/python -m pip install -e .
          else
            python -m pip install -e .
          fi

      - name: Run Python tests
        run: |
          if [ "${{ matrix.python-version }}" = "3.7" ]; then
            .venv-py37/bin/python -m pytest tests/ -v --tb=short -o addopts=""
          else
            pytest tests/ -v --tb=short -o addopts=""
          fi

  # Code quality checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install ruff mypy maturin

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Rust clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check Python formatting
        run: ruff format --check python/ tests/

      - name: Run Python linting
        run: ruff check python/ tests/

  # Comprehensive testing - runs on main branch
  full-test:
    name: Full Test Suite (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Python 3.7 only on Ubuntu (use uv to install)
          - os: windows-latest
            python-version: "3.7"
          - os: macos-latest
            python-version: "3.7"

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Create Python venv (for Python 3.7)
        if: matrix.python-version == '3.7' && runner.os == 'Linux'
        run: |
          # Use the Python installed by setup-python
          python -m venv .venv-py37
          .venv-py37/bin/python --version

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-full-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-full-
            ${{ runner.os }}-cargo-

      - name: Install build dependencies
        run: |
          if [ "${{ matrix.python-version }}" = "3.7" ] && [ "${{ runner.os }}" = "Linux" ]; then
            .venv-py37/bin/python -m pip install -U pip setuptools wheel
            .venv-py37/bin/python -m pip install maturin pytest pytest-cov
          else
            python -m pip install -U pip setuptools wheel
            python -m pip install maturin pytest pytest-cov
          fi
        shell: bash

      - name: Build extension
        run: |
          if [ "${{ matrix.python-version }}" = "3.7" ] && [ "${{ runner.os }}" = "Linux" ]; then
            .venv-py37/bin/python -m pip install -e .
          else
            python -m pip install -e .
          fi
        shell: bash

      - name: Run all tests
        run: |
          cargo test --lib
          if [ "${{ matrix.python-version }}" = "3.7" ] && [ "${{ runner.os }}" = "Linux" ]; then
            .venv-py37/bin/python -m pytest tests/ -v --cov=auroraview --cov-report=xml
          else
            pytest tests/ -v --cov=auroraview --cov-report=xml
          fi
        shell: bash

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # CI success check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-test, lint, multi-python-test]
    if: always()

    steps:
      - name: Check all required jobs
        run: |
          if [[ "${{ needs.quick-test.result }}" != "success" ]]; then
            echo "❌ Quick tests failed"
            exit 1
          fi
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [[ "${{ needs.multi-python-test.result }}" != "success" ]]; then
            echo "❌ Multi-Python tests failed"
            exit 1
          fi
          echo "✅ All required CI checks passed"

